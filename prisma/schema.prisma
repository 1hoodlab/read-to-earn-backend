// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator dbml {
    provider = "prisma-dbml-generator"
}

model user {
    id                   String            @id @unique @default(uuid())
    username             String
    password             String
    avatar               String?
    email                String
    first_name           String?
    last_name            String?
    token_expiry_date    DateTime?         @db.Timestamp(6)
    verify_email_token   String?           @db.VarChar
    reset_password_token String?           @db.VarChar
    auth_email_google    String?           @unique @db.VarChar // login with google will save for here
    auth_metamask_wallet String?           @unique @db.VarChar // login with metamask - feature for web3
    time_send_token      DateTime?         @db.Timestamp(6) // set time for token and check resend token after 5 minutes
    role                 Role              @default(reader)
    stars                Int               @default(0)
    created_at           DateTime          @default(now())
    updated_at           DateTime?         @updatedAt @db.Timestamp(6)
    nonce_for_earn       Int
    user_token           user_token?
    news                 news[]
    user_claim_news      user_claim_news[]
}

model user_token {
    id Int @id @default(autoincrement())

    refresh_token       String?
    refresh_token_times Int?
    access_token        String

    user_id String @unique
    user    user   @relation(fields: [user_id], references: [id])
}

model news {
    id           Int     @id @default(autoincrement())
    title        String
    content_url  String
    cid          String  @unique
    total_supply String?

    author             user                 @relation(fields: [author_id], references: [id])
    author_id          String
    categories_on_news categories_on_news[]
    tags_on_news       tags_on_news[]
    user_claim_news    user_claim_news[]
}

model categories_on_news {
    news        news     @relation(fields: [news_id], references: [id])
    news_id     Int
    category    category @relation(fields: [category_id], references: [id])
    category_id Int

    assigned_at DateTime @default(now())

    @@id([news_id, category_id])
}

model user_claim_news {
    news           news     @relation(fields: [news_id], references: [id])
    news_id        Int
    user           user     @relation(fields: [user_id], references: [id])
    user_id        String
    transaction_id String
    token_earned   String
    created_at     DateTime @default(now())

    @@id([news_id, user_id])
}

model tags_on_news {
    news    news @relation(fields: [news_id], references: [id])
    news_id Int
    tag     tag  @relation(fields: [tag_id], references: [id])
    tag_id  Int

    assigned_at DateTime @default(now())

    @@id([news_id, tag_id])
}

model category {
    id                 Int                  @id @default(autoincrement())
    name               String               @unique
    categories_on_news categories_on_news[]
}

model tag {
    id           Int            @id @default(autoincrement())
    name         String
    link         String
    tags_on_news tags_on_news[]
}

enum Role {
    writer
    reader
    root
}
